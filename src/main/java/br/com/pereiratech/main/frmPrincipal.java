/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.pereiratech.main;

import br.com.pereiratech.handlers.Matrix;
import br.com.pereiratech.handlers.Operacoes;
import br.com.pereiratech.utils.Singleton;

import java.awt.FileDialog;
import java.awt.Frame;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;

/**
 *
 * @author mrx
 */
public class frmPrincipal extends javax.swing.JFrame {    
    /**
     * Creates new form frmPrincipal
     */
    public frmPrincipal() {
        initComponents();
        setLocationRelativeTo(null);
        this.setTitle("PDI - FCT Unesp - Murilo Pereira");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel1 = new java.awt.Panel();
        button1 = new java.awt.Button();
        button2 = new java.awt.Button();
        btn90Anti = new java.awt.Button();
        btn90H = new java.awt.Button();
        btnFlipH = new java.awt.Button();
        btnFlipV = new java.awt.Button();
        btnGama = new java.awt.Button();
        btnEq = new java.awt.Button();
        btnClarear = new java.awt.Button();
        btnEscure = new java.awt.Button();
        btnFatI = new java.awt.Button();
        btnNeg = new java.awt.Button();
        btnSplit = new java.awt.Button();
        btnJoin = new java.awt.Button();
        btnLaplaciando1 = new java.awt.Button();
        btnLaplaciando2 = new java.awt.Button();
        btnMedia = new java.awt.Button();
        btnMediaBin = new java.awt.Button();
        btnLaplaciando3 = new java.awt.Button();
        btnLaplaciando4 = new java.awt.Button();
        btnMedia1 = new java.awt.Button();
        btnMedia2 = new java.awt.Button();
        btnMedia3 = new java.awt.Button();
        btnMedia4 = new java.awt.Button();
        btnMedia5 = new java.awt.Button();
        btnMedia6 = new java.awt.Button();
        btnMedia7 = new java.awt.Button();
        btnMedia8 = new java.awt.Button();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        button1.setLabel("Abrir...");
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });

        button2.setLabel("Salvar...");
        button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button2ActionPerformed(evt);
            }
        });

        btn90Anti.setLabel("90° Anti");
        btn90Anti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn90AntiActionPerformed(evt);
            }
        });

        btn90H.setLabel("90° Hora");
        btn90H.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn90HActionPerformed(evt);
            }
        });

        btnFlipH.setLabel("Flip H");
        btnFlipH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFlipHActionPerformed(evt);
            }
        });

        btnFlipV.setLabel("Flip V");
        btnFlipV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFlipVActionPerformed(evt);
            }
        });

        btnGama.setLabel("Gama");
        btnGama.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGamaActionPerformed(evt);
            }
        });

        btnEq.setLabel("Equalizar");
        btnEq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEqActionPerformed(evt);
            }
        });

        btnClarear.setLabel("Clarear");
        btnClarear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClarearActionPerformed(evt);
            }
        });

        btnEscure.setLabel("Escurecer");
        btnEscure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEscureActionPerformed(evt);
            }
        });

        btnFatI.setLabel("Fatiamento");
        btnFatI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFatIActionPerformed(evt);
            }
        });

        btnNeg.setLabel("Negativo");
        btnNeg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNegActionPerformed(evt);
            }
        });

        btnSplit.setActionCommand("Ext Canais");
        btnSplit.setLabel("Split Canais");
        btnSplit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSplitActionPerformed(evt);
            }
        });

        btnJoin.setActionCommand("Ext Canais");
        btnJoin.setLabel("Join Canais");
        btnJoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnJoinActionPerformed(evt);
            }
        });

        btnLaplaciando1.setActionCommand("Ext Canais");
        btnLaplaciando1.setLabel("Laplaciando");
        btnLaplaciando1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLaplaciando1ActionPerformed(evt);
            }
        });

        btnLaplaciando2.setActionCommand("Ext Canais");
        btnLaplaciando2.setLabel("Lapla. 02");
        btnLaplaciando2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLaplaciando2ActionPerformed(evt);
            }
        });

        btnMedia.setActionCommand("Ext Canais");
        btnMedia.setLabel("Média");
        btnMedia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMediaActionPerformed(evt);
            }
        });

        btnMediaBin.setActionCommand("Ext Canais");
        btnMediaBin.setLabel("Media+Bin");
        btnMediaBin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMediaBinActionPerformed(evt);
            }
        });

        btnLaplaciando3.setActionCommand("Ext Canais");
        btnLaplaciando3.setLabel("Lapla + Orig");
        btnLaplaciando3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLaplaciando3ActionPerformed(evt);
            }
        });

        btnLaplaciando4.setActionCommand("Ext Canais");
        btnLaplaciando4.setLabel("Lapla2 + Orig");
        btnLaplaciando4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLaplaciando4ActionPerformed(evt);
            }
        });

        btnMedia1.setActionCommand("Ext Canais");
        btnMedia1.setLabel("RGB -> HSI");
        btnMedia1.setName("rgbHSI"); // NOI18N
        btnMedia1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMedia1ActionPerformed(evt);
            }
        });

        btnMedia2.setActionCommand("Ext Canais");
        btnMedia2.setLabel("RGB -> CYM");
        btnMedia2.setName("rgbCYM"); // NOI18N
        btnMedia2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMedia2ActionPerformed(evt);
            }
        });

        btnMedia3.setActionCommand("Ext Canais");
        btnMedia3.setLabel("Mult. K");
        btnMedia3.setName("multK"); // NOI18N
        btnMedia3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMedia3ActionPerformed(evt);
            }
        });

        btnMedia4.setActionCommand("Ext Canais");
        btnMedia4.setLabel("Sum K");
        btnMedia4.setName("sumK"); // NOI18N
        btnMedia4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMedia4ActionPerformed(evt);
            }
        });

        btnMedia5.setActionCommand("Ext Canais");
        btnMedia5.setLabel("Sum Img");
        btnMedia5.setName("sumImg"); // NOI18N
        btnMedia5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMedia5ActionPerformed(evt);
            }
        });

        btnMedia6.setActionCommand("Ext Canais");
        btnMedia6.setLabel("Sub Img");
        btnMedia6.setName("subImg"); // NOI18N
        btnMedia6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMedia6ActionPerformed(evt);
            }
        });

        btnMedia7.setActionCommand("Ext Canais");
        btnMedia7.setLabel("Mediana");
        btnMedia7.setName("mediana"); // NOI18N
        btnMedia7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMedia7ActionPerformed(evt);
            }
        });

        btnMedia8.setActionCommand("Ext Canais");
        btnMedia8.setLabel("Binarizar");
        btnMedia8.setName("bin"); // NOI18N
        btnMedia8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMedia8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(panel1Layout.createSequentialGroup()
                            .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(button2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(panel1Layout.createSequentialGroup()
                            .addComponent(btn90Anti, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btn90H, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addComponent(btnFlipH, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnFlipV, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addComponent(btnGama, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEq, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addComponent(btnClarear, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEscure, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addComponent(btnFatI, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNeg, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addComponent(btnSplit, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnJoin, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addComponent(btnLaplaciando1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLaplaciando2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addComponent(btnMedia, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMediaBin, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addComponent(btnLaplaciando3, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLaplaciando4, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnMedia5, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnMedia3, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnMedia4, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnMedia6, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addComponent(btnMedia1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMedia2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addComponent(btnMedia7, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMedia8, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(button2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btn90Anti, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn90H, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnFlipH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFlipV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnGama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnClarear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEscure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnFatI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNeg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSplit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnJoin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLaplaciando1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLaplaciando2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLaplaciando3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLaplaciando4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnMedia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMediaBin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnMedia7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMedia8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnMedia1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMedia2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnMedia4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMedia3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnMedia5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMedia6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        btn90Anti.getAccessibleContext().setAccessibleName("btn90Anti");
        btn90Anti.getAccessibleContext().setAccessibleDescription("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 680, Short.MAX_VALUE)
                .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel2)
                .addContainerGap(301, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(249, 249, 249))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
        // TODO add your handling code here:
        FileDialog dialog = new FileDialog((Frame)null, "Selecione um arquivo...");
        dialog.setFilenameFilter(new FilenameFilter() {
            @Override
            public boolean accept(File dir, String name) {
                if(name.toLowerCase().endsWith(".pgm") || name.toLowerCase().endsWith(".ppm") || name.toLowerCase().endsWith(".txt"))
                    return true; 
                else
                    return false;
            }
        });        
        dialog.setMode(FileDialog.LOAD);
        dialog.setVisible(true);
        String file = dialog.getDirectory() + dialog.getFile(); 
        if(file.equals(""))
            return;

        if(file.toLowerCase().endsWith(".txt")) {
            Map<String, ArrayList<String>> ops = Operacoes.lerInstrucoes(file);
            BufferedImage img = null;
            try {
                img = ImageIO.read(new File(ops.get("load").get(0)));                
            } catch (IOException e) {
                System.out.println(e);
            }

            int fatorA = 0;
            int largura = 0;
            int altura = 0;
            String[] h = Operacoes.extrairHeader(ops.get("load").get(0));
            largura = Integer.parseInt(h[1].split(" ")[0]);
            altura = Integer.parseInt(h[1].split(" ")[1]);

            if(altura > 472)
                fatorA = 50;
            else {
                fatorA = 60;
                altura = 472;
            }

            this.jLabel2.setIcon(new ImageIcon(img));
            frmPrincipal j = this;
            new Thread() {     
                @Override
                public void run() {
                    Operacoes.processarInstrucoes(ops);

                    String finalFile = ops.get("save") == null ? "temp." + Singleton.getInstance().getFormato() : ops.get("save").get(0);
                    BufferedImage img = null;
                    try {
                        img = ImageIO.read(new File(finalFile));
                    } catch (IOException e) {
                        System.out.println(e);
                    }
                    
                    int fatorA = 0;
                    int largura = 0;
                    int altura = 0;
                    String[] h = Operacoes.extrairHeader(ops.get("load").get(0));
                    largura = Integer.parseInt(h[1].split(" ")[0]);
                    altura = Integer.parseInt(h[1].split(" ")[1]);

                    if(altura > 472)
                        fatorA = 50;
                    else {
                        fatorA = 60;
                        altura = 472;
                    }
                    j.jLabel2.setIcon(new ImageIcon(img));
                }
            }.start();

            return;
        }       
        
        JDialog d = new JDialog(this, "Aguarde..."); 
        d.setResizable(false);
        // create a label 
        JLabel l = new JLabel("Aguarde enquanto trabalhamos...", SwingConstants.CENTER); 
        l.setVisible(true);
        l.setLocation(200, 40);   
        d.setLocationRelativeTo(null);
        d.setModal(true);
        d.add(l);        
        // setsize of dialog 
        d.setSize(300, 100); 

        // set visibility of dialog 
        frmPrincipal j = this;
        new Thread() {     
            @Override
            public void run() {
                if(file.toLowerCase().endsWith(".pgm"))
                    Operacoes.normalizarImagemPGM(file);
                else
                    Operacoes.normalizarImagemPPM(file);
                int fatorA = 0;
                int largura = 0;
                int altura = 0;
                String[] h = Operacoes.extrairHeader(file);
                largura = Integer.parseInt(h[1].split(" ")[0]);
                altura = Integer.parseInt(h[1].split(" ")[1]);
                Singleton.getInstance().setHeaderOriginal(h);
                if(file.toLowerCase().endsWith(".pgm")) {
                    int[][] m = Matrix.lerMatrizEmArquivoPGM(file, altura, largura);
                    Singleton.getInstance().setOriginalPGM(m);
                    Singleton.getInstance().setFormato("pgm");
                }
                else {
                    int[][][] m = Matrix.lerMatrizEmArquivoPPM(file, altura, largura);
                    Singleton.getInstance().setOriginalPPM(m);
                    Singleton.getInstance().setFormato("ppm");
                }                              
                if(altura > 472)
                    fatorA = 50;
                else {
                    fatorA = 60;
                    altura = 250;
                }

                j.setSize(largura+220, altura+fatorA);
                d.setVisible(false);                
            }
        }.start();
         
        BufferedImage img = null;
        try {
            img = ImageIO.read(new File(file));
        } catch (Exception e) {
            System.out.println(e);
        }
        j.jLabel2.setIcon(new ImageIcon(img));

        d.setVisible(true);
    }//GEN-LAST:event_button1ActionPerformed

    private void btn90AntiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn90AntiActionPerformed
        // TODO add your handling code here:
        JDialog d = new JDialog(this, "Aguarde..."); 
        d.setResizable(false);
        // create a label 
        JLabel l = new JLabel("Aguarde enquanto trabalhamos...", SwingConstants.CENTER); 
        l.setVisible(true);
        l.setLocation(200, 40);   
        d.setLocationRelativeTo(null);
        d.setModal(true);
        d.add(l);        
        // setsize of dialog 
        d.setSize(300, 100); 

        // set visibility of dialog         
        frmPrincipal j = this;
        new Thread() {     
            @Override
            public void run() {
                if(Singleton.getInstance().getFormato().toLowerCase().equals("pgm"))
                    Operacoes.rotacionar(Singleton.getInstance().getOriginalPGM(), 1, "temp.pgm", Singleton.getInstance().getHeaderOriginal());                    
                else
                    Operacoes.rotacionarPPM(Singleton.getInstance().getOriginalPPM(), 1, "temp.ppm", Singleton.getInstance().getHeaderOriginal());

                BufferedImage img = null;
                try {
                    img = ImageIO.read(new File("temp."+Singleton.getInstance().getFormato()));
                } catch (IOException e) {
                    System.out.println(e);
                }
                String[] h = Operacoes.extrairHeader("temp."+Singleton.getInstance().getFormato());
                int largura = Integer.parseInt(h[1].split(" ")[0]);
                int altura = Integer.parseInt(h[1].split(" ")[1]);
                int fatorA = 0;

                if(altura > 472)
                    fatorA = 50;
                else {
                    fatorA = 60;
                    altura = 472;
                }

                j.setSize(largura+220, altura+fatorA);
                jLabel2.setIcon(new ImageIcon(img));
                d.setVisible(false);
            }
        }.start();
        
        d.setVisible(true);
    }//GEN-LAST:event_btn90AntiActionPerformed

    private void btn90HActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn90HActionPerformed
        // TODO add your handling code here:
        JDialog d = new JDialog(this, "Aguarde..."); 
        d.setResizable(false);
        // create a label 
        JLabel l = new JLabel("Aguarde enquanto trabalhamos...", SwingConstants.CENTER); 
        l.setVisible(true);
        l.setLocation(200, 40);   
        d.setLocationRelativeTo(null);
        d.setModal(true);
        d.add(l);        
        // setsize of dialog 
        d.setSize(300, 100); 

        // set visibility of dialog 
                // set visibility of dialog         
        frmPrincipal j = this;
        new Thread() {     
            @Override
            public void run() {
                if(Singleton.getInstance().getFormato().toLowerCase().equals("pgm"))
                    Operacoes.rotacionar(Singleton.getInstance().getOriginalPGM(), 0, "temp.pgm", Singleton.getInstance().getHeaderOriginal());                    
                else
                    Operacoes.rotacionarPPM(Singleton.getInstance().getOriginalPPM(), 0, "temp.ppm", Singleton.getInstance().getHeaderOriginal());

                BufferedImage img = null;
                try {
                    img = ImageIO.read(new File("temp."+Singleton.getInstance().getFormato()));
                } catch (IOException e) {
                    System.out.println(e);
                }
                String[] h = Operacoes.extrairHeader("temp."+Singleton.getInstance().getFormato());
                int largura = Integer.parseInt(h[1].split(" ")[0]);
                int altura = Integer.parseInt(h[1].split(" ")[1]);
                int fatorA = 0;

                if(altura > 472)
                    fatorA = 50;
                else {
                    fatorA = 60;
                    altura = 472;
                }

                j.setSize(largura+220, altura+fatorA);
                jLabel2.setIcon(new ImageIcon(img));                
                d.setVisible(false);
            }
        }.start();
        d.setVisible(true);
    }//GEN-LAST:event_btn90HActionPerformed

    private void btnFlipHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFlipHActionPerformed
        // TODO add your handling code here:
        JDialog d = new JDialog(this, "Aguarde..."); 
        d.setResizable(false);
        // create a label 
        JLabel l = new JLabel("Aguarde enquanto trabalhamos...", SwingConstants.CENTER); 
        l.setVisible(true);
        l.setLocation(200, 40);   
        d.setLocationRelativeTo(null);
        d.setModal(true);
        d.add(l);        
        // setsize of dialog 
        d.setSize(300, 100); 

        // set visibility of dialog 
                // set visibility of dialog         
        frmPrincipal j = this;
        new Thread() {     
            @Override
            public void run() {
                if(Singleton.getInstance().getFormato().toLowerCase().equals("pgm"))
                    Operacoes.flipar(Singleton.getInstance().getOriginalPGM(), 0, "temp.pgm", Singleton.getInstance().getHeaderOriginal());                    
                else
                    Operacoes.fliparPPM(Singleton.getInstance().getOriginalPPM(), 0, "temp.ppm", Singleton.getInstance().getHeaderOriginal());

                BufferedImage img = null;
                try {
                    img = ImageIO.read(new File("temp."+Singleton.getInstance().getFormato()));
                } catch (IOException e) {
                    System.out.println(e);
                }
                String[] h = Operacoes.extrairHeader("temp."+Singleton.getInstance().getFormato());
                int largura = Integer.parseInt(h[1].split(" ")[0]);
                int altura = Integer.parseInt(h[1].split(" ")[1]);
                int fatorA = 0;

                if(altura > 472)
                    fatorA = 50;
                else {
                    fatorA = 60;
                    altura = 472;
                }

                j.setSize(largura+220, altura+fatorA);
                jLabel2.setIcon(new ImageIcon(img));
                d.setVisible(false);
            }
        }.start();
        d.setVisible(true);
    }//GEN-LAST:event_btnFlipHActionPerformed

    private void btnFlipVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFlipVActionPerformed
        // TODO add your handling code here:
        JDialog d = new JDialog(this, "Aguarde..."); 
        d.setResizable(false);
        // create a label 
        JLabel l = new JLabel("Aguarde enquanto trabalhamos...", SwingConstants.CENTER); 
        l.setVisible(true);
        l.setLocation(200, 40);   
        d.setLocationRelativeTo(null);
        d.setModal(true);
        d.add(l);        
        // setsize of dialog 
        d.setSize(300, 100); 

        // set visibility of dialog 
                // set visibility of dialog         
        frmPrincipal j = this;
        new Thread() {     
            @Override
            public void run() {
                if(Singleton.getInstance().getFormato().toLowerCase().equals("pgm"))
                    Operacoes.flipar(Singleton.getInstance().getOriginalPGM(), 1, "temp.pgm", Singleton.getInstance().getHeaderOriginal());                    
                else
                    Operacoes.fliparPPM(Singleton.getInstance().getOriginalPPM(), 1, "temp.ppm", Singleton.getInstance().getHeaderOriginal());

                BufferedImage img = null;
                try {
                    img = ImageIO.read(new File("temp."+Singleton.getInstance().getFormato()));
                } catch (IOException e) {
                    System.out.println(e);
                }
                String[] h = Operacoes.extrairHeader("temp."+Singleton.getInstance().getFormato());
                int largura = Integer.parseInt(h[1].split(" ")[0]);
                int altura = Integer.parseInt(h[1].split(" ")[1]);
                int fatorA = 0;

                if(altura > 472)
                    fatorA = 50;
                else {
                    fatorA = 60;
                    altura = 472;
                }

                j.setSize(largura+220, altura+fatorA);
                jLabel2.setIcon(new ImageIcon(img));
                d.setVisible(false);
            }
        }.start();
        d.setVisible(true);
    }//GEN-LAST:event_btnFlipVActionPerformed

    private void btnGamaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGamaActionPerformed
        // TODO add your handling code here:
        String c = JOptionPane.showInputDialog("Insira o valor da constante: ");
        String gama = JOptionPane.showInputDialog("Insira o valor da gama: ");
        
        if(c.equals("") || gama.equals(""))
            return;
        
        double ci = Double.parseDouble(c);
        double gi = Double.parseDouble(gama);
          
        JDialog d = new JDialog(this, "Aguarde..."); 
        d.setResizable(false);
        // create a label 
        JLabel l = new JLabel("Aguarde enquanto trabalhamos...", SwingConstants.CENTER); 
        l.setVisible(true);
        l.setLocation(200, 40);   
        d.setLocationRelativeTo(null);
        d.setModal(true);
        d.add(l);        
        // setsize of dialog 
        d.setSize(300, 100); 

        // set visibility of dialog 
                // set visibility of dialog         
        frmPrincipal j = this;
        new Thread() {     
            @Override
            public void run() {
        
                if(Singleton.getInstance().getFormato().toLowerCase().equals("pgm"))
                    Operacoes.gama(Singleton.getInstance().getOriginalPGM(), ci, gi, Singleton.getInstance().getHeaderOriginal(), "temp.pgm");                    
                else
                    Operacoes.gamaPPM(Singleton.getInstance().getOriginalPPM(), ci, gi, Singleton.getInstance().getHeaderOriginal(), "temp.ppm");

                BufferedImage img = null;
                try {
                    img = ImageIO.read(new File("temp."+Singleton.getInstance().getFormato()));
                } catch (IOException e) {
                    System.out.println(e);
                }
                String[] h = Operacoes.extrairHeader("temp."+Singleton.getInstance().getFormato());
                int largura = Integer.parseInt(h[1].split(" ")[0]);
                int altura = Integer.parseInt(h[1].split(" ")[1]);
                int fatorA = 0;

                if(altura > 472)
                    fatorA = 50;
                else {
                    fatorA = 60;
                    altura = 472;
                }

                j.setSize(largura+220, altura+fatorA);
                jLabel2.setIcon(new ImageIcon(img));
                d.setVisible(false);
            }
        }.start();
        d.setVisible(true);
    }//GEN-LAST:event_btnGamaActionPerformed

    private void btnEqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEqActionPerformed
        // TODO add your handling code here:                
        JDialog d = new JDialog(this, "Aguarde..."); 
        d.setResizable(false);
        // create a label 
        JLabel l = new JLabel("Aguarde enquanto trabalhamos...", SwingConstants.CENTER); 
        l.setVisible(true);
        l.setLocation(200, 40);   
        d.setLocationRelativeTo(null);
        d.setModal(true);
        d.add(l);        
        // setsize of dialog 
        d.setSize(300, 100); 

        // set visibility of dialog 
                // set visibility of dialog         
        frmPrincipal j = this;
        new Thread() {     
            @Override
            public void run() {
                if(Singleton.getInstance().getFormato().toLowerCase().equals("pgm"))
                    Operacoes.equalizar(Singleton.getInstance().getOriginalPGM(), Singleton.getInstance().getHeaderOriginal(), "temp.pgm");                    
                else
                    Operacoes.equalizarPPM(Singleton.getInstance().getOriginalPPM(), Singleton.getInstance().getHeaderOriginal(), "temp.ppm");

                BufferedImage img = null;
                try {
                    img = ImageIO.read(new File("temp."+Singleton.getInstance().getFormato()));
                } catch (IOException e) {
                    System.out.println(e);
                }
                String[] h = Operacoes.extrairHeader("temp."+Singleton.getInstance().getFormato());
                int largura = Integer.parseInt(h[1].split(" ")[0]);
                int altura = Integer.parseInt(h[1].split(" ")[1]);
                int fatorA = 0;

                if(altura > 472)
                    fatorA = 50;
                else {
                    fatorA = 60;
                    altura = 472;
                }

                j.setSize(largura+220, altura+fatorA);
                jLabel2.setIcon(new ImageIcon(img));
                d.setVisible(false);
            }
        }.start();
        d.setVisible(true);
    }//GEN-LAST:event_btnEqActionPerformed

    private void btnFatIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFatIActionPerformed
        // TODO add your handling code here:
        String a = JOptionPane.showInputDialog("Insira o limite inferior: ");
        String b = JOptionPane.showInputDialog("Insira o limite superior: ");
        String dentro = JOptionPane.showInputDialog("Insira o valor a ser substituido dentro do limite: ");
        String fora = JOptionPane.showInputDialog("Insira o valor a ser substituido fora do limite: ");
        String modo = JOptionPane.showInputDialog("Insira o modo de troca:\n(0-Fora e dentro, 1-Somente o que está dentro) ");
        
        if(a.equals("") || b.equals("") || dentro.equals("") || fora.equals("") || modo.equals(""))
            return;
        
        int ai = Integer.parseInt(a);
        int bi = Integer.parseInt(b);
        int di = Integer.parseInt(dentro);
        int fi = Integer.parseInt(fora);
        int mi = Integer.parseInt(modo);
        
        JDialog d = new JDialog(this, "Aguarde..."); 
        d.setResizable(false);
        // create a label 
        JLabel l = new JLabel("Aguarde enquanto trabalhamos...", SwingConstants.CENTER); 
        l.setVisible(true);
        l.setLocation(200, 40);   
        d.setLocationRelativeTo(null);
        d.setModal(true);
        d.add(l);        
        // setsize of dialog 
        d.setSize(300, 100); 

        // set visibility of dialog 
                // set visibility of dialog         
        frmPrincipal j = this;
        new Thread() {     
            @Override
            public void run() {;
        
                if(Singleton.getInstance().getFormato().toLowerCase().equals("pgm"))
                    Operacoes.fatiar(Singleton.getInstance().getOriginalPGM(), ai, bi, mi, di, fi, "temp.pgm", Singleton.getInstance().getHeaderOriginal());                    
                else
                    Operacoes.fatiarPPM(Singleton.getInstance().getOriginalPPM(), ai, bi, mi, di, fi, "temp.ppm", Singleton.getInstance().getHeaderOriginal());

                BufferedImage img = null;
                try {
                    img = ImageIO.read(new File("temp."+Singleton.getInstance().getFormato()));
                } catch (IOException e) {
                    System.out.println(e);
                }
                String[] h = Operacoes.extrairHeader("temp."+Singleton.getInstance().getFormato());
                int largura = Integer.parseInt(h[1].split(" ")[0]);
                int altura = Integer.parseInt(h[1].split(" ")[1]);
                int fatorA = 0;

                if(altura > 472)
                    fatorA = 50;
                else {
                    fatorA = 60;
                    altura = 472;
                }
        
                j.setSize(largura+220, altura+fatorA);
                jLabel2.setIcon(new ImageIcon(img));

                d.setVisible(false);
            }
        }.start();
        d.setVisible(true);
    }//GEN-LAST:event_btnFatIActionPerformed

    private void btnNegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNegActionPerformed
        // TODO add your handling code here:
        JDialog d = new JDialog(this, "dialog Box"); 
        d.setResizable(false);
        // create a label 
        JLabel l = new JLabel("Aguarde enquanto trabalhamos...", SwingConstants.CENTER); 
        l.setVisible(true);
        l.setLocation(200, 40);   
        d.setLocationRelativeTo(null);
        d.setModal(true);
        d.add(l);        
        // setsize of dialog 
        d.setSize(300, 100); 

        // set visibility of dialog 
                // set visibility of dialog         
        frmPrincipal j = this;
        new Thread() {     
            @Override
            public void run() {
                if(Singleton.getInstance().getFormato().toLowerCase().equals("pgm"))
                    Operacoes.negativaPGM(Singleton.getInstance().getOriginalPGM(), "temp.pgm", Singleton.getInstance().getHeaderOriginal());                    
                else
                    Operacoes.negativaPPM(Singleton.getInstance().getOriginalPPM(), "temp.ppm", Singleton.getInstance().getHeaderOriginal());

                BufferedImage img = null;
                try {
                    img = ImageIO.read(new File("temp."+Singleton.getInstance().getFormato()));
                } catch (IOException e) {
                    System.out.println(e);
                }
                String[] h = Operacoes.extrairHeader("temp."+Singleton.getInstance().getFormato());
                int largura = Integer.parseInt(h[1].split(" ")[0]);
                int altura = Integer.parseInt(h[1].split(" ")[1]);
                int fatorA = 0;

                if(altura > 472)
                    fatorA = 50;
                else {
                    fatorA = 60;
                    altura = 472;
                }

                j.setSize(largura+220, altura+fatorA);
                jLabel2.setIcon(new ImageIcon(img));
                d.setVisible(false);
            }
        }.start();
        d.setVisible(true);
    }//GEN-LAST:event_btnNegActionPerformed

    private void btnClarearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClarearActionPerformed
        // TODO add your handling code here:
        String a = JOptionPane.showInputDialog("Insira o coeficiente: ");
        
        if(a.equals(""))
            return;
        
        int ai = Integer.parseInt(a);
        
        JDialog d = new JDialog(this, "Aguarde..."); 
        d.setResizable(false);
        // create a label 
        JLabel l = new JLabel("Aguarde enquanto trabalhamos...", SwingConstants.CENTER); 
        l.setVisible(true);
        l.setLocation(200, 40);   
        d.setLocationRelativeTo(null);
        d.setModal(true);
        d.add(l);        
        // setsize of dialog 
        d.setSize(300, 100); 

        // set visibility of dialog 
                // set visibility of dialog         
        frmPrincipal j = this;
        new Thread() {     
            @Override
            public void run() {
        
                if(Singleton.getInstance().getFormato().toLowerCase().equals("pgm"))
                    Operacoes.clarearPGM(Singleton.getInstance().getOriginalPGM(), ai, "temp.pgm", Singleton.getInstance().getHeaderOriginal());                    
                else
                    Operacoes.clarearPPM(Singleton.getInstance().getOriginalPPM(), ai, "temp.ppm", Singleton.getInstance().getHeaderOriginal());

                BufferedImage img = null;
                try {
                    img = ImageIO.read(new File("temp."+Singleton.getInstance().getFormato()));
                } catch (IOException e) {
                    System.out.println(e);
                }
                String[] h = Operacoes.extrairHeader("temp."+Singleton.getInstance().getFormato());
                int largura = Integer.parseInt(h[1].split(" ")[0]);
                int altura = Integer.parseInt(h[1].split(" ")[1]);
                int fatorA = 0;

                if(altura > 472)
                    fatorA = 50;
                else {
                    fatorA = 60;
                    altura = 472;
                }

                j.setSize(largura+220, altura+fatorA);
                jLabel2.setIcon(new ImageIcon(img));

                d.setVisible(false);
            }
        }.start();
        d.setVisible(true);
    }//GEN-LAST:event_btnClarearActionPerformed

    private void btnEscureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEscureActionPerformed
        // TODO add your handling code here:
        String a = JOptionPane.showInputDialog("Insira o coeficiente: ");
        
        if(a.equals(""))
            return;
        
        int ai = Integer.parseInt(a);
        
        JDialog d = new JDialog(this, "Aguarde..."); 
        d.setResizable(false);
        // create a label 
        JLabel l = new JLabel("Aguarde enquanto trabalhamos...", SwingConstants.CENTER); 
        l.setVisible(true);
        l.setLocation(200, 40);   
        d.setLocationRelativeTo(null);
        d.setModal(true);
        d.add(l);        
        // setsize of dialog 
        d.setSize(300, 100);  

        // set visibility of dialog 
                // set visibility of dialog         
        frmPrincipal j = this;
        new Thread() {     
            @Override
            public void run() {
        
                if(Singleton.getInstance().getFormato().toLowerCase().equals("pgm"))
                    Operacoes.escurecerPGM(Singleton.getInstance().getOriginalPGM(), ai, "temp.pgm", Singleton.getInstance().getHeaderOriginal());                    
                else
                    Operacoes.escurecerPPM(Singleton.getInstance().getOriginalPPM(), ai, "temp.ppm", Singleton.getInstance().getHeaderOriginal());

                BufferedImage img = null;
                try {
                    img = ImageIO.read(new File("temp."+Singleton.getInstance().getFormato()));
                } catch (IOException e) {
                    System.out.println(e);
                }
                String[] h = Operacoes.extrairHeader("temp."+Singleton.getInstance().getFormato());
                int largura = Integer.parseInt(h[1].split(" ")[0]);
                int altura = Integer.parseInt(h[1].split(" ")[1]);
                int fatorA = 0;

                if(altura > 472)
                    fatorA = 50;
                else {
                    fatorA = 60;
                    altura = 472;
                }

                j.setSize(largura+220, altura+fatorA);
                jLabel2.setIcon(new ImageIcon(img));

                d.setVisible(false);
            }
        }.start();
    }//GEN-LAST:event_btnEscureActionPerformed

    private void button2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button2ActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Selecione o caminho para salvar");   

        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            String fileName =  fileToSave.getAbsolutePath();

            frmPrincipal j = this;
            new Thread() {     
                @Override
                public void run() {
                if(Singleton.getInstance().getFormato().equals("pgm"))
                    Matrix.gravarMatrizEmArquivoPGM(Singleton.getInstance().getOriginalPGM(), fileName, Singleton.getInstance().getHeaderOriginal());
                else
                    Matrix.gravarMatrizEmArquivoPPM(Singleton.getInstance().getOriginalPPM(), fileName, Singleton.getInstance().getHeaderOriginal());
                }
            }.start();            
        }
    }//GEN-LAST:event_button2ActionPerformed

    private void btnSplitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSplitActionPerformed
        if(!Singleton.getInstance().getFormato().equals("ppm"))
            return;
        // TODO add your handling code here:
        JDialog d = new JDialog(this, "Aguarde..."); 
        d.setResizable(false);
        // create a label 
        JLabel l = new JLabel("Aguarde enquanto trabalhamos...", SwingConstants.CENTER); 
        l.setVisible(true);
        l.setLocation(200, 40);   
        d.setLocationRelativeTo(null);
        d.setModal(true);
        d.add(l);        
        // setsize of dialog 
        d.setSize(300, 100);                                        
                
        frmPrincipal j = this;
        new Thread() {     
            @Override
            public void run() {
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setDialogTitle("Selecione o caminho para salvar o canal R");   

                int userSelection = fileChooser.showSaveDialog(null);
                String fileNameR = "";
                String fileNameG = "";
                String fileNameB = "";

                if (userSelection == JFileChooser.APPROVE_OPTION) {
                    File fileToSave = fileChooser.getSelectedFile();
                    fileNameR =  fileToSave.getAbsolutePath();            
                }
                
                if(fileNameR.equals(""))
                    return;

                fileChooser.setDialogTitle("Selecione o caminho para salvar o canal G");   

                userSelection = fileChooser.showSaveDialog(null);
                if (userSelection == JFileChooser.APPROVE_OPTION) {
                    File fileToSave = fileChooser.getSelectedFile();
                    fileNameG =  fileToSave.getAbsolutePath();            
                }
                
                if(fileNameG.equals(""))
                    return;

                fileChooser.setDialogTitle("Selecione o caminho para salvar o canal B");   

                userSelection = fileChooser.showSaveDialog(null);
                if (userSelection == JFileChooser.APPROVE_OPTION) {
                    File fileToSave = fileChooser.getSelectedFile();
                    fileNameB =  fileToSave.getAbsolutePath();            
                }
                
                if(fileNameB.equals(""))
                    return;
                Matrix.gravarMatrizEmArquivoPPM(Singleton.getInstance().getOriginalPPM(), "temp.ppm", Singleton.getInstance().getHeaderOriginal());                                
                
                Operacoes.gravarCanaisSeparados(Singleton.getInstance().getOriginalPPM(), fileNameR, fileNameG, fileNameB);
                
                d.setVisible(false);
            }
        }.start();
                
        d.setVisible(true);
    }//GEN-LAST:event_btnSplitActionPerformed

    private void btnJoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnJoinActionPerformed
        JDialog d = new JDialog(this, "Aguarde..."); 
        d.setResizable(false);
        // create a label 
        JLabel l = new JLabel("Aguarde enquanto trabalhamos...", SwingConstants.CENTER); 
        l.setVisible(true);
        l.setLocation(200, 40);   
        d.setLocationRelativeTo(null);
        d.setModal(true);
        d.add(l);        
        // setsize of dialog 
        d.setSize(300, 100); 

        // set visibility of dialog 
                // set visibility of dialog         
        frmPrincipal j = this;
        new Thread() {     
            @Override
            public void run() {
                FileDialog dialog = new FileDialog((Frame)null, "Selecione o canal R");
                dialog.setFilenameFilter(new FilenameFilter() {
                    @Override
                    public boolean accept(File dir, String name) {
                        if(name.toLowerCase().endsWith(".pgm") || name.toLowerCase().endsWith(".ppm"))
                            return true; 
                        else
                            return false;
                    }
                });        
                dialog.setMode(FileDialog.LOAD);
                dialog.setVisible(true);
                String R = dialog.getDirectory() + dialog.getFile();
                
                if(R.equals(""))
                    return;
                
                dialog = new FileDialog((Frame)null, "Selecione o canal G");
                dialog.setFilenameFilter(new FilenameFilter() {
                    @Override
                    public boolean accept(File dir, String name) {
                        if(name.toLowerCase().endsWith(".pgm") || name.toLowerCase().endsWith(".ppm"))
                            return true; 
                        else
                            return false;
                    }
                });        
                dialog.setMode(FileDialog.LOAD);
                dialog.setVisible(true);
                String G = dialog.getDirectory() + dialog.getFile();
                
                if(G.equals(""))
                    return;
                
                dialog = new FileDialog((Frame)null, "Selecione o canal B");
                dialog.setFilenameFilter(new FilenameFilter() {
                    @Override
                    public boolean accept(File dir, String name) {
                        if(name.toLowerCase().endsWith(".pgm") || name.toLowerCase().endsWith(".ppm"))
                            return true; 
                        else
                            return false;
                    }
                });        
                dialog.setMode(FileDialog.LOAD);
                dialog.setVisible(true);
                String B = dialog.getDirectory() + dialog.getFile();
                
                if(B.equals(""))
                    return;
                
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setDialogTitle("Selecione o caminho para salvar o arquivo final");   

                int userSelection = fileChooser.showSaveDialog(null);
                String fileName = "";

                if (userSelection == JFileChooser.APPROVE_OPTION) {
                    File fileToSave = fileChooser.getSelectedFile();
                    fileName =  fileToSave.getAbsolutePath();            
                }
                
                Operacoes.gravarCanaisJuntos(R, G, B, fileName);
                
                BufferedImage img = null;
                try {
                    img = ImageIO.read(new File(fileName));
                } catch (IOException e) {
                    System.out.println(e);
                }
                
                int fatorA = 0;
                int largura = 0;
                int altura = 0;
                String[] h = Operacoes.extrairHeader(fileName);
                largura = Integer.parseInt(h[1].split(" ")[0]);
                altura = Integer.parseInt(h[1].split(" ")[1]);
                Singleton.getInstance().setHeaderOriginal(h);
                Operacoes.normalizarImagemPPM(fileName);
                Singleton.getInstance().setOriginalPPM(Matrix.lerMatrizEmArquivoPPM(fileName, altura, largura));
                Singleton.getInstance().setFormato("ppm");                                             
                
                if(altura > 472)
                    fatorA = 50;
                else {
                    fatorA = 60;
                    altura = 472;
                }

                j.setSize(largura+220, altura+fatorA);
                jLabel2.setIcon(new ImageIcon(img));
                d.setVisible(false);
            }
        }.start();
        
        d.setVisible(false);
        // TODO add your handling code here:
    }//GEN-LAST:event_btnJoinActionPerformed

    private void btnLaplaciando1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLaplaciando1ActionPerformed
        String a = JOptionPane.showInputDialog("Insira o modo: \n0 - Leva negativos a 0\n1 - Mantém negativos\n2 - Leva a zero proporcionalmente");
        
        if(a.equals(""))
            return;
        
        int ai = Integer.parseInt(a);

        String b = JOptionPane.showInputDialog("O elementro central é: \n1 - Positivo\n2 - Negativo");
        
        if(b.equals(""))
            return;
        
        int bi = Integer.parseInt(b);
        
        JDialog d = new JDialog(this, "Aguarde..."); 
        d.setResizable(false);
        // create a label 
        JLabel l = new JLabel("Aguarde enquanto trabalhamos...", SwingConstants.CENTER); 
        l.setVisible(true);
        l.setLocation(200, 40);   
        d.setLocationRelativeTo(null);
        d.setModal(true);
        d.add(l);        
        // setsize of dialog 
        d.setSize(300, 100);  

        // set visibility of dialog 
                // set visibility of dialog         
        frmPrincipal j = this;
        new Thread() {     
            @Override
            public void run() {
        
                if(Singleton.getInstance().getFormato().toLowerCase().equals("pgm"))
                    Operacoes.laplaciando(Singleton.getInstance().getOriginalPGM(), Singleton.getInstance().getHeaderOriginal(), "temp.pgm", ai, bi);                    
                else
                    return;

                BufferedImage img = null;
                try {
                    img = ImageIO.read(new File("temp."+Singleton.getInstance().getFormato()));
                } catch (IOException e) {
                    System.out.println(e);
                }
                String[] h = Operacoes.extrairHeader("temp."+Singleton.getInstance().getFormato());
                int largura = Integer.parseInt(h[1].split(" ")[0]);
                int altura = Integer.parseInt(h[1].split(" ")[1]);
                int fatorA = 0;

                if(altura > 472)
                    fatorA = 50;
                else {
                    fatorA = 60;
                    altura = 472;
                }

                j.setSize(largura+220, altura+fatorA);
                jLabel2.setIcon(new ImageIcon(img));

                d.setVisible(false);
            }
        }.start();
        
        d.setVisible(true);
    }//GEN-LAST:event_btnLaplaciando1ActionPerformed

    private void btnLaplaciando2ActionPerformed(java.awt.event.ActionEvent evt) {
        String a = JOptionPane.showInputDialog("Insira o modo: \n0 - Leva negativos a 0\n1 - Mantém negativos\n2 - Leva a zero proporcionalmente");
        
        if(a.equals(""))
            return;
        
        int ai = Integer.parseInt(a);
        
        String b = JOptionPane.showInputDialog("O elementro central é: \n1 - Positivo\n2 - Negativo");
        
        if(b.equals(""))
            return;
        
        int bi = Integer.parseInt(b);

        JDialog d = new JDialog(this, "Aguarde..."); 
        d.setResizable(false);
        // create a label 
        JLabel l = new JLabel("Aguarde enquanto trabalhamos...", SwingConstants.CENTER); 
        l.setVisible(true);
        l.setLocation(200, 40);   
        d.setLocationRelativeTo(null);
        d.setModal(true);
        d.add(l);        
        // setsize of dialog 
        d.setSize(300, 100);  

        // set visibility of dialog 
                // set visibility of dialog         
        frmPrincipal j = this;
        new Thread() {     
            @Override
            public void run() {
        
                if(Singleton.getInstance().getFormato().toLowerCase().equals("pgm"))
                    Operacoes.laplaciando2(Singleton.getInstance().getOriginalPGM(), Singleton.getInstance().getHeaderOriginal(), "temp.pgm", ai, bi);                    
                else
                    return;

                BufferedImage img = null;
                try {
                    img = ImageIO.read(new File("temp."+Singleton.getInstance().getFormato()));
                } catch (IOException e) {
                    System.out.println(e);
                }
                String[] h = Operacoes.extrairHeader("temp."+Singleton.getInstance().getFormato());
                int largura = Integer.parseInt(h[1].split(" ")[0]);
                int altura = Integer.parseInt(h[1].split(" ")[1]);
                int fatorA = 0;

                if(altura > 472)
                    fatorA = 50;
                else {
                    fatorA = 60;
                    altura = 472;
                }

                j.setSize(largura+220, altura+fatorA);
                jLabel2.setIcon(new ImageIcon(img));

                d.setVisible(false);
            }
        }.start();
        
        d.setVisible(true);
    }
    private void btnMediaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMediaActionPerformed
        String a = JOptionPane.showInputDialog("Insira a dimensão do filtro: ");
        
        if(a.equals(""))
            return;
        
        int ai = Integer.parseInt(a);
        
        JDialog d = new JDialog(this, "Aguarde..."); 
        d.setResizable(false);
        // create a label 
        JLabel l = new JLabel("Aguarde enquanto trabalhamos...", SwingConstants.CENTER); 
        l.setVisible(true);
        l.setLocation(200, 40);   
        d.setLocationRelativeTo(null);
        d.setModal(true);
        d.add(l);        
        // setsize of dialog 
        d.setSize(300, 100);  

        // set visibility of dialog 
                // set visibility of dialog         
        frmPrincipal j = this;
        new Thread() {     
            @Override
            public void run() {
        
                if(Singleton.getInstance().getFormato().toLowerCase().equals("pgm"))
                    Operacoes.filtroMedio(Singleton.getInstance().getOriginalPGM(), Singleton.getInstance().getHeaderOriginal(), "temp.pgm", ai);                    
                else
                    return;

                BufferedImage img = null;
                try {
                    img = ImageIO.read(new File("temp."+Singleton.getInstance().getFormato()));
                } catch (IOException e) {
                    e.printStackTrace();
                }
                String[] h = Operacoes.extrairHeader("temp."+Singleton.getInstance().getFormato());
                
                int largura = Integer.parseInt(h[1].split(" ")[0]);
                int altura = Integer.parseInt(h[1].split(" ")[1]);
                int fatorA = 0;

                if(altura > 472)
                    fatorA = 50;
                else {
                    fatorA = 60;
                    altura = 472;
                }

                j.setSize(largura+220, altura+fatorA);
                try {
                    jLabel2.setIcon(new ImageIcon(img));
                }
                catch (Exception e) {
                    e.printStackTrace();
                }
                d.setVisible(false);
            }
        }.start();
        
        d.setVisible(true);
    }//GEN-LAST:event_btnMediaActionPerformed

    private void btnMediaBinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMediaBinActionPerformed
        String a = JOptionPane.showInputDialog("Insira a dimensão do filtro: ");
        
        if(a.equals(""))
            return;
        
        int ai = Integer.parseInt(a);
        
        String c = JOptionPane.showInputDialog("Insira o k para binarização: ");
        
        if(c.equals(""))
            return;
        
        int ci = Integer.parseInt(c);
        
        
        JDialog d = new JDialog(this, "Aguarde..."); 
        d.setResizable(false);
        // create a label 
        JLabel l = new JLabel("Aguarde enquanto trabalhamos...", SwingConstants.CENTER); 
        l.setVisible(true);
        l.setLocation(200, 40);   
        d.setLocationRelativeTo(null);
        d.setModal(true);
        d.add(l);        
        // setsize of dialog 
        d.setSize(300, 100);  

        // set visibility of dialog 
                // set visibility of dialog         
        frmPrincipal j = this;
        new Thread() {     
            @Override
            public void run() {
        
                if(Singleton.getInstance().getFormato().toLowerCase().equals("pgm")) {
                    Operacoes.filtroMedio(Singleton.getInstance().getOriginalPGM(), Singleton.getInstance().getHeaderOriginal(), "temp.pgm", ai);     
                    Operacoes.binarizacao(Singleton.getInstance().getOriginalPGM(), Singleton.getInstance().getHeaderOriginal(), "temp.pgm", ci);     
                }
                else
                    return;

                BufferedImage img = null;
                try {
                    img = ImageIO.read(new File("temp."+Singleton.getInstance().getFormato()));
                } catch (IOException e) {
                    e.printStackTrace();
                }
                String[] h = Operacoes.extrairHeader("temp."+Singleton.getInstance().getFormato());
                
                int largura = Integer.parseInt(h[1].split(" ")[0]);
                int altura = Integer.parseInt(h[1].split(" ")[1]);
                int fatorA = 0;

                if(altura > 472)
                    fatorA = 50;
                else {
                    fatorA = 60;
                    altura = 472;
                }

                j.setSize(largura+220, altura+fatorA);
                try {
                    jLabel2.setIcon(new ImageIcon(img));
                }
                catch (Exception e) {
                    e.printStackTrace();
                }
                d.setVisible(false);
            }
        }.start();
        
        d.setVisible(true);
    }//GEN-LAST:event_btnMediaBinActionPerformed

    private void btnLaplaciando3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLaplaciando3ActionPerformed
        String a = JOptionPane.showInputDialog("Insira o modo: \n0 - Leva negativos a 0\n1 - Mantém negativos\n2 - Leva a zero proporcionalmente");
        
        if(a.equals(""))
            return;
        
        int ai = Integer.parseInt(a);
        
        String b = JOptionPane.showInputDialog("O elementro central é: \n1 - Positivo\n2 - Negativo");
        
        if(b.equals(""))
            return;
        
        int bi = Integer.parseInt(b);

        JDialog d = new JDialog(this, "Aguarde..."); 
        d.setResizable(false);
        // create a label 
        JLabel l = new JLabel("Aguarde enquanto trabalhamos...", SwingConstants.CENTER); 
        l.setVisible(true);
        l.setLocation(200, 40);   
        d.setLocationRelativeTo(null);
        d.setModal(true);
        d.add(l);        
        // setsize of dialog 
        d.setSize(300, 100);  

        // set visibility of dialog 
                // set visibility of dialog         
        frmPrincipal j = this;
        new Thread() {     
            @Override
            public void run() {
        
                if(Singleton.getInstance().getFormato().toLowerCase().equals("pgm"))
                    Operacoes.laplaciandoPlusOrig(Singleton.getInstance().getOriginalPGM(), Singleton.getInstance().getHeaderOriginal(), "temp.pgm", ai, bi);                    
                else
                    return;

                BufferedImage img = null;
                try {
                    img = ImageIO.read(new File("temp."+Singleton.getInstance().getFormato()));
                } catch (IOException e) {
                    System.out.println(e);
                }
                
                String[] h = Operacoes.extrairHeader("temp."+Singleton.getInstance().getFormato());
                int largura = Integer.parseInt(h[1].split(" ")[0]);
                int altura = Integer.parseInt(h[1].split(" ")[1]);
                int fatorA = 0;

                if(altura > 472)
                    fatorA = 50;
                else {
                    fatorA = 60;
                    altura = 472;
                }
                j.setSize(largura+220, altura+fatorA);
                jLabel2.setIcon(new ImageIcon(img));

                d.setVisible(false);
            }
        }.start();
        
        d.setVisible(true);        
    }//GEN-LAST:event_btnLaplaciando3ActionPerformed

    private void btnLaplaciando4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLaplaciando4ActionPerformed
        String a = JOptionPane.showInputDialog("Insira o modo: \n0 - Leva negativos a 0\n1 - Mantém negativos\n2 - Leva a zero proporcionalmente");
        
        if(a.equals(""))
            return;
        
        int ai = Integer.parseInt(a);
        
        String b = JOptionPane.showInputDialog("O elementro central é: \n1 - Positivo\n2 - Negativo");
        
        if(b.equals(""))
            return;
        
        int bi = Integer.parseInt(b);

        JDialog d = new JDialog(this, "Aguarde..."); 
        d.setResizable(false);
        // create a label 
        JLabel l = new JLabel("Aguarde enquanto trabalhamos...", SwingConstants.CENTER); 
        l.setVisible(true);
        l.setLocation(200, 40);   
        d.setLocationRelativeTo(null);
        d.setModal(true);
        d.add(l);        
        // setsize of dialog 
        d.setSize(300, 100);  

        // set visibility of dialog 
                // set visibility of dialog         
        frmPrincipal j = this;
        new Thread() {     
            @Override
            public void run() {
        
                if(Singleton.getInstance().getFormato().toLowerCase().equals("pgm"))
                    Operacoes.laplaciando2PlusOrig(Singleton.getInstance().getOriginalPGM(), Singleton.getInstance().getHeaderOriginal(), "temp.pgm", ai, bi);                    
                else
                    return;

                BufferedImage img = null;
                try {
                    img = ImageIO.read(new File("temp."+Singleton.getInstance().getFormato()));
                } catch (IOException e) {
                    System.out.println(e);
                }
                
                String[] h = Operacoes.extrairHeader("temp."+Singleton.getInstance().getFormato());
                int largura = Integer.parseInt(h[1].split(" ")[0]);
                int altura = Integer.parseInt(h[1].split(" ")[1]);
                int fatorA = 0;

                if(altura > 472)
                    fatorA = 50;
                else {
                    fatorA = 60;
                    altura = 472;
                }
                j.setSize(largura+220, altura+fatorA);
                jLabel2.setIcon(new ImageIcon(img));

                d.setVisible(false);
            }
        }.start();
        
        d.setVisible(true);   
    }//GEN-LAST:event_btnLaplaciando4ActionPerformed

    private void btnMedia1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMedia1ActionPerformed
        if(!Singleton.getInstance().getFormato().equals("ppm"))
            return;

        JDialog d = new JDialog(this, "Aguarde..."); 
        d.setResizable(false);
        // create a label 
        JLabel l = new JLabel("Aguarde enquanto trabalhamos...", SwingConstants.CENTER); 
        l.setVisible(true);
        l.setLocation(200, 40);   
        d.setLocationRelativeTo(null);
        d.setModal(true);
        d.add(l);        
        // setsize of dialog 
        d.setSize(300, 100);                                        
                
        frmPrincipal j = this;
        new Thread() {     
            @Override
            public void run() {
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setDialogTitle("Selecione o caminho para salvar o canal H");   

                int userSelection = fileChooser.showSaveDialog(null);
                String fileNameH = "";
                String fileNameS = "";
                String fileNameI = "";

                if (userSelection == JFileChooser.APPROVE_OPTION) {
                    File fileToSave = fileChooser.getSelectedFile();
                    fileNameH =  fileToSave.getAbsolutePath();            
                }
                
                if(fileNameH.equals(""))
                    return;

                fileChooser.setDialogTitle("Selecione o caminho para salvar o canal S");   

                userSelection = fileChooser.showSaveDialog(null);
                if (userSelection == JFileChooser.APPROVE_OPTION) {
                    File fileToSave = fileChooser.getSelectedFile();
                    fileNameS =  fileToSave.getAbsolutePath();            
                }
                
                if(fileNameS.equals(""))
                    return;

                fileChooser.setDialogTitle("Selecione o caminho para salvar o canal I");   

                userSelection = fileChooser.showSaveDialog(null);
                if (userSelection == JFileChooser.APPROVE_OPTION) {
                    File fileToSave = fileChooser.getSelectedFile();
                    fileNameI =  fileToSave.getAbsolutePath();            
                }
                
                if(fileNameI.equals(""))
                    return;
                Matrix.gravarMatrizEmArquivoPPM(Singleton.getInstance().getOriginalPPM(), "temp.ppm", Singleton.getInstance().getHeaderOriginal());                                
                
                Operacoes.RGB2HSI(Singleton.getInstance().getOriginalPPM(), Singleton.getInstance().getHeaderOriginal(), fileNameH, fileNameS, fileNameI);
                
                d.setVisible(false);
            }
        }.start();
                
        d.setVisible(true);
    }//GEN-LAST:event_btnMedia1ActionPerformed

    private void btnMedia2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMedia2ActionPerformed
        //RGB -> CYM
    }//GEN-LAST:event_btnMedia2ActionPerformed

    private void btnMedia3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMedia3ActionPerformed
        String a = JOptionPane.showInputDialog("Insira a constante K:");
        
        if(a.equals(""))
            return;
        
        int ai = Integer.parseInt(a);
        
        JDialog d = new JDialog(this, "Aguarde..."); 
        d.setResizable(false);
        // create a label 
        JLabel l = new JLabel("Aguarde enquanto trabalhamos...", SwingConstants.CENTER); 
        l.setVisible(true);
        l.setLocation(200, 40);   
        d.setLocationRelativeTo(null);
        d.setModal(true);
        d.add(l);        
        // setsize of dialog 
        d.setSize(300, 100);  

        // set visibility of dialog 
                // set visibility of dialog         
        frmPrincipal j = this;
        new Thread() {     
            @Override
            public void run() {
        
                if(Singleton.getInstance().getFormato().toLowerCase().equals("pgm"))
                    Operacoes.MultImageKPGM(Singleton.getInstance().getOriginalPGM(), Singleton.getInstance().getHeaderOriginal(), "temp.pgm", ai);                    
                else
                    Operacoes.MultImageKPPM(Singleton.getInstance().getOriginalPPM(), Singleton.getInstance().getHeaderOriginal(), "temp.ppm", ai);

                BufferedImage img = null;
                try {
                    img = ImageIO.read(new File("temp."+Singleton.getInstance().getFormato()));
                } catch (IOException e) {
                    System.out.println(e);
                }
                
                String[] h = Operacoes.extrairHeader("temp."+Singleton.getInstance().getFormato());
                int largura = Integer.parseInt(h[1].split(" ")[0]);
                int altura = Integer.parseInt(h[1].split(" ")[1]);
                int fatorA = 0;

                if(altura > 472)
                    fatorA = 50;
                else {
                    fatorA = 60;
                    altura = 472;
                }
                j.setSize(largura+220, altura+fatorA);
                jLabel2.setIcon(new ImageIcon(img));

                d.setVisible(false);
            }
        }.start();
        
        d.setVisible(true);   
    }//GEN-LAST:event_btnMedia3ActionPerformed

    private void btnMedia4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMedia4ActionPerformed
        String a = JOptionPane.showInputDialog("Insira a constante K:");
        
        if(a.equals(""))
            return;
        
        int ai = Integer.parseInt(a);
        
        JDialog d = new JDialog(this, "Aguarde..."); 
        d.setResizable(false);
        // create a label 
        JLabel l = new JLabel("Aguarde enquanto trabalhamos...", SwingConstants.CENTER); 
        l.setVisible(true);
        l.setLocation(200, 40);   
        d.setLocationRelativeTo(null);
        d.setModal(true);
        d.add(l);        
        // setsize of dialog 
        d.setSize(300, 100);  

        // set visibility of dialog 
                // set visibility of dialog         
        frmPrincipal j = this;
        new Thread() {     
            @Override
            public void run() {
        
                if(Singleton.getInstance().getFormato().toLowerCase().equals("pgm"))
                    Operacoes.SumImageKPGM(Singleton.getInstance().getOriginalPGM(), Singleton.getInstance().getHeaderOriginal(), "temp.pgm", ai);                    
                else
                    Operacoes.SumImageKPPM(Singleton.getInstance().getOriginalPPM(), Singleton.getInstance().getHeaderOriginal(), "temp.ppm", ai);

                BufferedImage img = null;
                try {
                    img = ImageIO.read(new File("temp."+Singleton.getInstance().getFormato()));
                } catch (IOException e) {
                    System.out.println(e);
                }
                
                String[] h = Operacoes.extrairHeader("temp."+Singleton.getInstance().getFormato());
                int largura = Integer.parseInt(h[1].split(" ")[0]);
                int altura = Integer.parseInt(h[1].split(" ")[1]);
                int fatorA = 0;

                if(altura > 472)
                    fatorA = 50;
                else {
                    fatorA = 60;
                    altura = 472;
                }
                j.setSize(largura+220, altura+fatorA);
                jLabel2.setIcon(new ImageIcon(img));

                d.setVisible(false);
            }
        }.start();
        
        d.setVisible(true);   
    }//GEN-LAST:event_btnMedia4ActionPerformed

    private void btnMedia5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMedia5ActionPerformed        
        FileDialog dialog = new FileDialog((Frame)null, "Selecione um arquivo...");
        dialog.setFilenameFilter(new FilenameFilter() {
            @Override
            public boolean accept(File dir, String name) {
                if(name.toLowerCase().endsWith(".pgm") || name.toLowerCase().endsWith(".ppm"))
                    return true; 
                else
                    return false;
            }
        });        
        dialog.setMode(FileDialog.LOAD);
        dialog.setVisible(true);
        String file = dialog.getDirectory() + dialog.getFile();
        
        JDialog d = new JDialog(this, "Aguarde..."); 
        d.setResizable(false);
        // create a label 
        JLabel l = new JLabel("Aguarde enquanto trabalhamos...", SwingConstants.CENTER); 
        l.setVisible(true);
        l.setLocation(200, 40);   
        d.setLocationRelativeTo(null);
        d.setModal(true);
        d.add(l);        
        // setsize of dialog 
        d.setSize(300, 100);  

        // set visibility of dialog 
                // set visibility of dialog         
        frmPrincipal j = this;
        new Thread() {     
            @Override
            public void run() {                
                String[] hImg2 = Operacoes.extrairHeader(file);
                int larguraImg2 = Integer.parseInt(hImg2[1].split(" ")[0]);
                int alturaImg2 = Integer.parseInt(hImg2[1].split(" ")[1]);         
                if(file.toLowerCase().endsWith(".pgm")) {
                    Operacoes.normalizarImagemPGM(file);
                    int[][] m = Matrix.lerMatrizEmArquivoPGM(file, alturaImg2, larguraImg2);       
                    Operacoes.SumImagePGM(Singleton.getInstance().getOriginalPGM(), m, Singleton.getInstance().getHeaderOriginal(), "temp.pgm");             
                }
                else {
                    Operacoes.normalizarImagemPPM(file);
                    int[][][] m = Matrix.lerMatrizEmArquivoPPM(file, alturaImg2, larguraImg2);
                    Operacoes.SumImagePPM(Singleton.getInstance().getOriginalPPM(), m, Singleton.getInstance().getHeaderOriginal(), "temp.ppm");
                }

                BufferedImage img = null;
                try {
                    img = ImageIO.read(new File("temp."+Singleton.getInstance().getFormato()));
                } catch (IOException e) {
                    System.out.println(e);
                }
                
                String[] h = Operacoes.extrairHeader("temp."+Singleton.getInstance().getFormato());
                int largura = Integer.parseInt(h[1].split(" ")[0]);
                int altura = Integer.parseInt(h[1].split(" ")[1]);
                int fatorA = 0;

                if(altura > 472)
                    fatorA = 50;
                else {
                    fatorA = 60;
                    altura = 472;
                }
                j.setSize(largura+220, altura+fatorA);
                jLabel2.setIcon(new ImageIcon(img));

                d.setVisible(false);
            }
        }.start();
        
        d.setVisible(true); 
    }//GEN-LAST:event_btnMedia5ActionPerformed

    private void btnMedia6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMedia6ActionPerformed
        FileDialog dialog = new FileDialog((Frame)null, "Selecione um arquivo...");
        dialog.setFilenameFilter(new FilenameFilter() {
            @Override
            public boolean accept(File dir, String name) {
                if(name.toLowerCase().endsWith(".pgm") || name.toLowerCase().endsWith(".ppm"))
                    return true; 
                else
                    return false;
            }
        });        
        dialog.setMode(FileDialog.LOAD);
        dialog.setVisible(true);
        String file = dialog.getDirectory() + dialog.getFile();
        
        JDialog d = new JDialog(this, "Aguarde..."); 
        d.setResizable(false);
        // create a label 
        JLabel l = new JLabel("Aguarde enquanto trabalhamos...", SwingConstants.CENTER); 
        l.setVisible(true);
        l.setLocation(200, 40);   
        d.setLocationRelativeTo(null);
        d.setModal(true);
        d.add(l);        
        // setsize of dialog 
        d.setSize(300, 100);  

        // set visibility of dialog 
                // set visibility of dialog         
        frmPrincipal j = this;
        new Thread() {     
            @Override
            public void run() {                
                String[] hImg2 = Operacoes.extrairHeader(file);
                int larguraImg2 = Integer.parseInt(hImg2[1].split(" ")[0]);
                int alturaImg2 = Integer.parseInt(hImg2[1].split(" ")[1]);         
                if(file.toLowerCase().endsWith(".pgm")) {
                    Operacoes.normalizarImagemPGM(file);
                    int[][] m = Matrix.lerMatrizEmArquivoPGM(file, alturaImg2, larguraImg2);       
                    Operacoes.SubImagePGM(Singleton.getInstance().getOriginalPGM(), m, Singleton.getInstance().getHeaderOriginal(), "temp.pgm");             
                }
                else {
                    Operacoes.normalizarImagemPPM(file);
                    int[][][] m = Matrix.lerMatrizEmArquivoPPM(file, alturaImg2, larguraImg2);
                    Operacoes.SubImagePPM(Singleton.getInstance().getOriginalPPM(), m, Singleton.getInstance().getHeaderOriginal(), "temp.ppm");
                }

                BufferedImage img = null;
                try {
                    img = ImageIO.read(new File("temp."+Singleton.getInstance().getFormato()));
                } catch (IOException e) {
                    System.out.println(e);
                }
                
                String[] h = Operacoes.extrairHeader("temp."+Singleton.getInstance().getFormato());
                int largura = Integer.parseInt(h[1].split(" ")[0]);
                int altura = Integer.parseInt(h[1].split(" ")[1]);
                int fatorA = 0;

                if(altura > 472)
                    fatorA = 50;
                else {
                    fatorA = 60;
                    altura = 472;
                }
                j.setSize(largura+220, altura+fatorA);
                jLabel2.setIcon(new ImageIcon(img));

                d.setVisible(false);
            }
        }.start();
        
        d.setVisible(true); 
    }//GEN-LAST:event_btnMedia6ActionPerformed

    private void btnMedia7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMedia7ActionPerformed        
        JDialog d = new JDialog(this, "Aguarde..."); 
        d.setResizable(false);
        // create a label 
        JLabel l = new JLabel("Aguarde enquanto trabalhamos...", SwingConstants.CENTER); 
        l.setVisible(true);
        l.setLocation(200, 40);   
        d.setLocationRelativeTo(null);
        d.setModal(true);
        d.add(l);        
        // setsize of dialog 
        d.setSize(300, 100);  

        // set visibility of dialog 
                // set visibility of dialog         
        frmPrincipal j = this;
        new Thread() {     
            @Override
            public void run() {
        
                if(Singleton.getInstance().getFormato().toLowerCase().equals("pgm"))
                    Operacoes.filtroMediana(Singleton.getInstance().getOriginalPGM(), Singleton.getInstance().getHeaderOriginal(), "temp.pgm");                    
                else
                    return;

                BufferedImage img = null;
                try {
                    img = ImageIO.read(new File("temp."+Singleton.getInstance().getFormato()));
                } catch (IOException e) {
                    e.printStackTrace();
                }
                String[] h = Operacoes.extrairHeader("temp."+Singleton.getInstance().getFormato());
                
                int largura = Integer.parseInt(h[1].split(" ")[0]);
                int altura = Integer.parseInt(h[1].split(" ")[1]);
                int fatorA = 0;

                if(altura > 472)
                    fatorA = 50;
                else {
                    fatorA = 60;
                    altura = 472;
                }

                j.setSize(largura+220, altura+fatorA);
                try {
                    jLabel2.setIcon(new ImageIcon(img));
                }
                catch (Exception e) {
                    e.printStackTrace();
                }
                d.setVisible(false);
            }
        }.start();
        
        d.setVisible(true);
    }//GEN-LAST:event_btnMedia7ActionPerformed

    private void btnMedia8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMedia8ActionPerformed
        String a = JOptionPane.showInputDialog("Insira o ponto de mudança:");
        
        if(a.equals(""))
            return;
        
        int ai = Integer.parseInt(a);
        
        JDialog d = new JDialog(this, "Aguarde..."); 
        d.setResizable(false);
        // create a label 
        JLabel l = new JLabel("Aguarde enquanto trabalhamos...", SwingConstants.CENTER); 
        l.setVisible(true);
        l.setLocation(200, 40);   
        d.setLocationRelativeTo(null);
        d.setModal(true);
        d.add(l);        
        // setsize of dialog 
        d.setSize(300, 100);  

        // set visibility of dialog 
                // set visibility of dialog         
        frmPrincipal j = this;
        new Thread() {     
            @Override
            public void run() {
        
                if(Singleton.getInstance().getFormato().toLowerCase().equals("pgm"))
                    Operacoes.binarizacao(Singleton.getInstance().getOriginalPGM(), Singleton.getInstance().getHeaderOriginal(), "temp.pgm", ai);                    
                else
                    return;

                BufferedImage img = null;
                try {
                    img = ImageIO.read(new File("temp."+Singleton.getInstance().getFormato()));
                } catch (IOException e) {
                    System.out.println(e);
                }
                
                String[] h = Operacoes.extrairHeader("temp."+Singleton.getInstance().getFormato());
                int largura = Integer.parseInt(h[1].split(" ")[0]);
                int altura = Integer.parseInt(h[1].split(" ")[1]);
                int fatorA = 0;

                if(altura > 472)
                    fatorA = 50;
                else {
                    fatorA = 60;
                    altura = 472;
                }
                j.setSize(largura+220, altura+fatorA);
                jLabel2.setIcon(new ImageIcon(img));

                d.setVisible(false);
            }
        }.start();
        
        d.setVisible(true);
    }//GEN-LAST:event_btnMedia8ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {                
                new frmPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button btn90Anti;
    private java.awt.Button btn90H;
    private java.awt.Button btnClarear;
    private java.awt.Button btnEq;
    private java.awt.Button btnEscure;
    private java.awt.Button btnFatI;
    private java.awt.Button btnFlipH;
    private java.awt.Button btnFlipV;
    private java.awt.Button btnGama;
    private java.awt.Button btnJoin;
    private java.awt.Button btnLaplaciando1;
    private java.awt.Button btnLaplaciando2;
    private java.awt.Button btnLaplaciando3;
    private java.awt.Button btnLaplaciando4;
    private java.awt.Button btnMedia;
    private java.awt.Button btnMedia1;
    private java.awt.Button btnMedia2;
    private java.awt.Button btnMedia3;
    private java.awt.Button btnMedia4;
    private java.awt.Button btnMedia5;
    private java.awt.Button btnMedia6;
    private java.awt.Button btnMedia7;
    private java.awt.Button btnMedia8;
    private java.awt.Button btnMediaBin;
    private java.awt.Button btnNeg;
    private java.awt.Button btnSplit;
    private java.awt.Button button1;
    private java.awt.Button button2;
    private javax.swing.JLabel jLabel2;
    private java.awt.Panel panel1;
    // End of variables declaration//GEN-END:variables
}
